1.Spring Could Zuul 就是做到请求转发，请求具体的服务实例，不直接访问实例，而是通过访问路由，在路由中建立映射规则，将请求转发都对应的实例中。
在路由中可以做一些校验工作，通过将路由注册到服务中心，可以获得服务的名称，路由规则直接映射对应的服务名即可。

通过路由请求product-service的getAllProductHasCode

http://192.168.1.132:1003/product-service/product/product/getAllProductHasCode?inUse=true
相当于localhost:7001/product/product/getAllProductHasCode?inUse=true

2.eureka

3.spring config 
创建一个 config-service 的服务端，配置文件中指定仓库的git 地址，HTTP连接需要账户密码，ssh需要秘钥
引用spring-cloud-config-server 依赖。启动类中加入EnableConfigServer.

其他服务要使用仓库配置需要引入spring-cloud-starter-config，然后使用bootstrap.yml 配置文件
配置 spring:
  cloud:
    config:
      uri: ${spring.profiles.url} //config-service 的ip
      name: ${spring.application.name}// 配置文件的服务名
      profile: ${spring.profiles.active}//配置文件的生效文件

基于服务化配置
客户端不通过 ip 访问服务端，而是利用服务服务注册中心，直接访问config service 的服务名，再根据配置获取 对应的配置文件。
config service  启动类加注解 @EnableDiscoveryClient 要指定服务注册中心，将自己注册起来。
 
config client 启动类加注解 @EnableDiscoveryClient 也要指定注册中心，能够发现服务。
配置文件中配置
spring.cloud.config.discovery.enabled = true;
开启通过服务访问config-service
spring.cloud.config.discovery.serviceId = config-service 指定服务名

spring.cloud.config.failFase = true;
客户端开启该配置，当配置在中心出错的时候，可以快速获取错误返回，配置预加载一堆不需要的信息。

refresh 动态刷新配置 需要在客户端添加actuator jar 包，暴露refresh端口。修改配置中心的配置文件后，访问一下refresh接口即可刷新，
注意要刷新的是客户端，即哪个客户端获取配置信息，刷新那个客户端。

4.spring cloud bus 消息总线 

1）springboot 整合 rabbitmq
引入spring-boot-starter-amqp

2)spring cloud bus 实现动态刷新config的配置文件
整合rabbitmq
1)安装rabbitmq
2)所用 客户端 引入spring-cloud-starter-bus-amqp,spring-cloud-starter-actuator
所用 客户端
3)客户端的配置文件中加入rabbitmq的登陆连接信息。

springcould 自动配置实现了自动属性。

当修改配置文件后，一个实例会自动触发refresh刷新配置，然后将消息推送到消息总线上。
其他服务实例连接在消息总线上，会获得刷新消息，获取更新配置。

优化
config-service 中同样配置amqp , 配置连接信息。当修改时由配置中心来刷新，其他实例获取更新。

5.spring cloud 与 Zipkin整合
主要用来分析和追踪一次请求的整体过程，各个服务之间调用的时间，执行路径等情况，提供一个UI来查看相关信息。
跟踪HTTP请求
1)引入依赖
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-autoconfigure-ui</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-server</artifactId>
        </dependency>
        <dependency>
            <groupId>io.zipkin.java</groupId>
            <artifactId>zipkin-autoconfigure-collector-rabbitmq</artifactId>
            <version>2.6.1</version>
        </dependency>
		
2)启动类加入@EnableZipkinServer

3)配置端口 8080
访问管理界面 http://localhost:8080/

4)为客户端配置Zipkin的信息
引入spring-cloud-sleuth-zipkin

并配置spring.zipkin.base-url=http://localhost:8080/

跟踪消息路径
引入spring-cloud-sleuth-stream